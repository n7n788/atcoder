#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <regex>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

struct P {
    int prev;
    int next;
    P(): prev(-1), next(-1) {}
    P(int prev, int next): prev(prev), next(next) {}
};

struct TwoWayList
{
    unordered_map<int, P> mp;
    int head, tail;
    TwoWayList(): mp({}), head(-1), tail(-1) {}

    // xを末尾に追加
    void insert_tail(int x) {
        if (mp.empty()) {
            head = tail = x;
            mp[x] = P{-1, -1};
            return;
        }
        if (tail != -1) mp[tail].next = x;
        mp[x] = P{tail, -1};
        tail = x;
    }

    // xの後にyを追加
    void insert(int x, int y) {
        assert(mp.count(x) != 0);
        assert(mp.count(y) == 0);
        auto [prev, next] = mp[x];
        mp[x].next = y;
        if (next != -1) mp[next].prev = y;
        else tail = y;
        mp[y] = P{x, next};
    }

    // xを削除
    void erase(int x) {
        assert(mp.count(x) != 0);
        auto [prev, next] = mp[x];
        mp.erase(x);
        if (prev != -1) mp[prev].next = next;
        else head = next;
        if (next != -1) mp[next].prev = prev;
        else tail = prev;
    }

    void print_all() {
        printf("head, tail = %d, %d\n", head, tail);
        for (auto [x, p]: mp) {
            printf("x, prev, next = %d, %d, %d\n", x, p.prev, p.next);
        }
    }

    void print() {
        int i = head;
        while (i != -1) {
            cout << i << " ";
            i = mp[i].next;
        }
        cout << "\n";
    }
};

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    int n, q;
    cin >> n;
    vi a(n);
    REP(i, n) cin >> a.at(i);
    cin >> q;

    TwoWayList tl;
    REP(i, n) tl.insert_tail(a.at(i));
    REP(qi, q) {
        int t, x, y;
        cin >> t >> x;
        if (t == 1) {
            cin >> y;
            tl.insert(x, y);
        } else {
            tl.erase(x);
        }
    }

    tl.print();
    return 0;
}
