#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

const string YES = "Yes";
const string NO = "No";

void solve(long long N, long long H, long long W, std::vector<long long> A, std::vector<long long> B)
{
    auto dfs = [&](auto dfs, vvi masu, vb used) -> bool {
        // 全て埋まっているかチェック
        bool fin = true;
        REP(i, H) REP(j, W) if (masu.at(i).at(j) == -1) fin = false;
        if (fin) return true;

        // 次に埋めるマスを決定
        int x = -1, y = -1;
        REP(i, H) {
            REP(j, W) if (masu.at(i).at(j) == -1) {x = i, y = j; break;}
            if (x != -1) break;
        }

        // printf("x = %d, y = %d\n", x, y);

        // 次に埋めるタイルを決定
        bool ans = false;
        REP(k, N) {
            // printf("k = %d\n", k);
            if (used.at(k)) continue;
            // 縦にするか横にするか決定
            REP(bi, 2) {
                // printf("bi = %d\n", bi);
                vvi ns = masu;
                bool ok = true;
                int a = A.at(k), b = B.at(k);
                if (bi) swap(a, b);
                REP(i, a) {
                    REP(j, b) {
                        int ni = i + x, nj = j + y;
                        if (ni >= H || nj >= W || ns.at(ni).at(nj) != -1) {ok = false; break;}
                        ns.at(ni).at(nj) = k;
                    }
                    if (!ok) break;
                }
                if (ok) {
                    used.at(k) = true;
                    ans |= dfs(dfs, ns, used);
                    used.at(k) = false;
                }
            }
        }
        return ans;
    };

    vvi masu(H, vi(W, -1));
    vb used(N, false);
    cout << ((dfs(dfs, masu, used)) ? YES : NO) << endl;

    return;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long N;
    std::scanf("%lld", &N);
    long long H;
    std::scanf("%lld", &H);
    long long W;
    std::scanf("%lld", &W);
    std::vector<long long> A(N);
    std::vector<long long> B(N);
    for(int i = 0 ; i < N ; i++){
        std::scanf("%lld", &A[i]);
        std::scanf("%lld", &B[i]);
    }
        solve(N, H, W, std::move(A), std::move(B));
        return 0;
}
