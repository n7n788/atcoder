#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <regex>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

struct Freq {
    int x;
    int c;
    Freq(int x = 0, int c = 0) : x(x), c(c) {}
    void print() { printf("x, c = %d, %d\n", x, c); }
};

struct P {
    Freq first, second;
    P(Freq first = Freq(), Freq second = Freq()) : first(first), second(second) {}
    void print() {
        printf("1: ");
        first.print();
        printf("2: ");
        second.print();
    }
};

// P op(P a, P b)
// {
//     map<int, int> cnts;
//     set<int> st;
//     auto f = [&](Freq frq) {
//         cnts[frq.x] += frq.c;
//         if (st.count(frq.x) == 0) st.insert(frq.x);
//     };
//     f(a.first);
//     f(b.first);
//     f(a.second);
//     f(b.second);
//     int max = *st.rbegin();
//     int max2 = *(++st.rbegin());
//     P c = {{max, cnts[max]}, {max2, cnts[max2]}};
//     return c;
// }

P op1(P a, Freq b)
{
    if (b.x == a.first.x) {
        a.first.c += b.c;
        return a;
    } else if (b.x == a.second.x) {
        a.second.c += b.c;
        return a;
    }
    if (b.x > a.second.x) a.second = b;
    if (a.second.x > a.first.x) swap(a.first, a.second);
    return a;
}

P op(P a, P b)
{
    return op1(op1(a, b.first), b.second);
}

P e()
{
    P a = {{0, 0}, {-1, 0}};
    return a;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    int n, q;
    cin >> n >> q;
    vi a(n);
    REP(i, n) cin >> a.at(i);

    // P p1 = {{3, 1}, {2, 2}};
    // P p2 = {{5, 5}, {4, 2}};
    // P p0;
    // P p3 = op(p1, p2);
    // P p4 = op(p1, p0);
    // p3.print();
    // p4.print();
    segtree<P, op, e> seg(n);
    REP(i, n) {
        seg.set(i, {{a.at(i), 1}, {0, 0}});
    }
    REP(qi, q) {
        int type;
        cin >> type;
        if (type == 1) {
            int p, x;
            cin >> p >> x;
            p--;
            seg.set(p, {{x, 1}, {0, 0}});
        } else {
            int l, r;
            cin >> l >> r;
            l--; r--;
            P p = seg.prod(l, r + 1);
            cout << p.second.c << "\n";
        }
    }
    return 0;
}
