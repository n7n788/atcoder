#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}


void solve(long long N, long long Q, std::vector<long long> X){
    vector b(N, vpii());
    unordered_set<ll> S;
    vector<ll> sz(Q);
    vector<ll> sum(Q + 1, 0);
    vector<ll> A(N, 0);

    REP(qi, Q) {
        ll x = --X.at(qi);
        // printf("x = %lld\n", x);
        if (b.at(x).size() == 0 || b.at(x).back().second != Q)  {
            // cout << "in\n";
            b.at(x).emplace_back(qi, Q);
        } else {
            // cout << "out\n";
            b.at(x).back().second = qi;
        }

        if (S.count(x)) S.erase(x);
        else S.insert(x);
        sz.at(qi) = S.size();
    }

    REP(qi, Q) sum.at(qi + 1) = sum.at(qi) + sz.at(qi);

    // REP(qi, Q + 1) printf("sum[%d] = %lld\n", qi, sum.at(qi));

    REP(i, N) {
        // printf("i = %d\n", i);
        for (auto [l, r]: b.at(i)) {
            // printf("[l, r) = [%lld, %lld]\n", l, r);
            A.at(i) += sum.at(r) - sum.at(l);
        }
    }

    REP(i, N) {
        cout << A.at(i) << "\n";
    }
    cout << endl;
    return;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long N;
    std::scanf("%lld", &N);
    long long Q;
    std::scanf("%lld", &Q);
    std::vector<long long> x(Q);
    for(int i = 0 ; i < Q ; i++){
        std::scanf("%lld", &x[i]);
    }
        solve(N, Q, std::move(x));
        return 0;
}
