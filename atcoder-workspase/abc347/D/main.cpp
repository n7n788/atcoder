#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

int popcount(ll x) 
{
    int cnt = 0;
    REP(i, 60) {
        if ((x >> i) & 1) cnt++;
    }
    return cnt;
}

void print(ll x)
{
    REV(i, 59, 0) {
        cout << (x >> i & 1ll);
    }
    cout << endl;
}

void solve(long long a, long long b, long long C){
    ll X = 0, Y = 0;

    vi bits0, bits1;
    REP(i, 60) {
        if ((C >> i) & 1ll) bits1.push_back(i);
        else bits0.push_back(i);
    }

    ll same = a + b - bits1.size();
    if (same % 2 == 1 || same < 0) {
        cout << -1 << endl;
        return;
    }

    same /= 2;
    ll a1 = a - same;
    ll b1 = b - same;
    if (a1 < 0 || b1 < 0) {
        cout << -1 << endl;
        return;
    }

    // cout << same << ", a = " << a1 << ", b = " << b1 << endl;

    // 一致するはずの条件をアサーション
    assert((ll) bits1.size() == a1 + b1);

    // if (a1 + b1 >= bits1.size()) {
    //     cout << -1 << endl;
    //     return;
    // }

    REP(i, a1) X |= (1ll << bits1.at(i));
    REP(i, b1) Y |= (1ll << bits1.at(i + a1));

    // print(X);
    // print(Y);

    if (same > bits0.size()) {
        cout << -1 << endl;
        return;
    }

    REP(i, same) {
        X |= (1ll << bits0.at(i));
        Y |= (1ll << bits0.at(i));
    }

    // print(X);
    // print(Y);

    cout << X << " " << Y << endl;

    assert(popcount(X) == a);
    assert(popcount(Y) == b);
    assert((X ^ Y) == C);
    return;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long a;
    std::scanf("%lld", &a);
    long long b;
    std::scanf("%lld", &b);
    long long C;
    std::scanf("%lld", &C);
        solve(a, b, C);
        return 0;
}
