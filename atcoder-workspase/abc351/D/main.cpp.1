#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

vi dx = {1, 0, -1, 0};
vi dy = {0, 1, 0, -1};

void print(vvi A, string name) {
    cout << name  << "= \n";
    REP(i, A.size()) {
        REP(j, A.at(i).size()) {
            cout << A.at(i).at(j) << " ";
        }
        cout << "\n";
    }
    cout << "\n";
}

void print(vvb A, string name) {
    cout << name  << " =\n";
    REP(i, A.size()) {
        REP(j, A.at(i).size()) {
            cout << A.at(i).at(j) << " ";
        }
        cout << "\n";
    }
    cout << "\n";
}

void solve(long long H, long long W, std::vector<std::string> S){
    vector x(H, vb(W, false));
    REP(i, H) REP(j, W) {
        if (S.at(i).at(j) == '#') {
            x.at(i).at(j) = true;
            REP(k, 4) {
                int nx = i + dx.at(k);
                int ny = j + dy.at(k);
                if (nx < 0 || nx >= H || ny < 0 || ny >= W) continue;
                x.at(nx).at(ny) = true;
            }
        }
    }

    // print(x, "x");
    
    vector used(H, vb(W, false));
    vector last(H, vi(W, 0)); int tm = 0;
    int ans = 1;
    REP(si, H) REP(sj, W) {
        if (x.at(si).at(sj)) continue;
        if (used.at(si).at(sj)) continue;
        tm++;

        // printf("tm, [si, sj] = %d, [%d, %d]\n", tm, si, sj);

        int cnt = 0;
        queue<pii> q;
        q.emplace(si, sj); used.at(si).at(sj) = true;
        while (!q.empty()) {
            cnt++;
            auto [i, j] = q.front(); q.pop();
            // cout << i << " " << j << "\n";
            REP(k, 4) {
                int nx = i + dx.at(k);
                int ny = j + dy.at(k);
                if (nx < 0 || nx >= H || ny < 0 || ny >= W) continue;
                if (used.at(nx).at(ny)) continue;
                if (x.at(nx).at(ny)) {
                    if (last.at(nx).at(ny) != tm) {
                        cnt++;
                        last.at(nx).at(ny) = tm;
                    }
                    continue;
                }
                q.emplace(nx, ny); used.at(nx).at(ny) = true;
            }
        }

        // print(used, "used");
        // print(last, "last");

        chmax(ans, cnt);
    }

    cout << ans << endl;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long H;
    std::scanf("%lld", &H);
    long long W;
    std::scanf("%lld", &W);
    std::vector<std::string> S(H);
    for(int i = 0 ; i < H ; i++){
        std::cin >> S[i];
    }
        solve(H, W, std::move(S));
        return 0;
}
