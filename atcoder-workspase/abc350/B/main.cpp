#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}

void solve(int n, int q, vi t) 
{
    vector<int> cnts(n, 0);
    REP(qi, q) {
        cnts.at(--t.at(qi))++;
    }
    int ans = 0;
    REP(i, n) {
        if (cnts.at(i) % 2 == 0) ans++;
    }
    cout << ans << endl;
    return;
}
// void solve(int n, int q, vi t) 
// {
//     REP(i, q) t.at(i)--;
//     vb tooth(n, true);
//     REP(i, q) tooth.at(t.at(i)) = !tooth.at(t.at(i));
//     int cnt = 0;
//     REP(i, n) if (tooth.at(i)) cnt++;
//     cout << cnt << "\n";
//     return;
// }
// void solve(int n, int q, vi t) 
// {
//     REP(i, q) t.at(i)--;
//     vb tooth(n, true);
//     REP(i, q) tooth.at(t.at(i)) = !tooth.at(t.at(i));
//     int cnt = 0;
//     REP(i, n) if (tooth.at(i)) cnt++;
//     cout << cnt << endl;
//     return;
// }

// void solve(long long N, long long Q, std::vector<long long> T){

// }

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    int N;
    std::scanf("%d", &N);
    int Q;
    std::scanf("%d", &Q);
    std::vector<int> T(Q);
    for(int i = 0 ; i < Q ; i++){
        std::scanf("%d", &T[i]);
    }
        solve(N, Q, std::move(T));
        return 0;
}
