#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}


// void solve(long long N, long long M, std::vector<long long> A, std::vector<long long> B){
//     dsu uf(N);
//     vector to(N, vl());
//     REP(i, M) {
//         A.at(i)--; B.at(i)--;
//         if (!uf.same(A.at(i), B.at(i))) uf.merge(A.at(i), B.at(i));
//         to.at(A.at(i)).push_back(B.at(i));
//         to.at(B.at(i)).push_back(A.at(i));
//     }

//     ll ans = 0;
//     for (auto g: uf.groups()) {
//         int gs = g.size();
//         for (auto i: g) ans += gs - to.at(i).size() - 1;
//     }
//     cout << ans / 2 << "\n";
//     return;
// }

// ll nC2(ll x) {
//     return x * (x - 1) / 2;
// }

// void solve(ll N, ll M, vl A, vl B)
// {
//     dsu uf(N);
//     REP(i, M) {
//         A.at(i)--; B.at(i)--;
//         if (!uf.same(A.at(i), B.at(i))) uf.merge(A.at(i), B.at(i));
//     }

//     ll sum = 0;
//     // 集合を全て取り出す
//     REP(i, N) {
//         if (i == uf.leader(i)) {
//             // cout << uf.size(i) << "\n";
//             sum += nC2((ll) uf.size(i));
//         }
//     }
//     sum -= M;
//     cout << sum << endl;
//     return;
// }

ll c2(ll x) {
    return x * (x - 1) / 2;
}

void solve(ll n, ll m, vl a, vl b)
{
    dsu uf(n);
    REP(i, m) {
        a.at(i)--; b.at(i)--;
        uf.merge(a.at(i), b.at(i));
    }
    ll ans = 0;
    REP(i, n) {
        if (i == uf.leader(i)) {
            ans += c2(uf.size(i));
        }
    }
    cout << ans - m << endl;
    return;
}
// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long N;
    std::scanf("%lld", &N);
    long long M;
    std::scanf("%lld", &M);
    std::vector<long long> A(M);
    std::vector<long long> B(M);
    for(int i = 0 ; i < M ; i++){
        std::scanf("%lld", &A[i]);
        std::scanf("%lld", &B[i]);
    }
        solve(N, M, std::move(A), std::move(B));
        return 0;
}
