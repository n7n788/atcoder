#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <regex>
#include <atcoder/all>
using namespace std;
using namespace atcoder;
using mint = modint998244353;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}



// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    int h, w;
    cin >> h >> w;
    pii s;
    cin >> s.first >> s.second;
    vs field(h);
    REP(i, h) cin >> field.at(i);
    string x;
    cin >> x;
    vector<int> dh = {-1, 0, 1, 0};
    vector<int> dw = {0, 1, 0, -1};
    int u = s.first - 1;
    int v = s.second - 1;
    unordered_map<char, int> ctoi = {{'U', 0}, {'R', 1}, {'D', 2}, {'L', 3}};
    REP(i, x.size()) {
        int k = ctoi.at(x.at(i));
        int nu = u + dh.at(k);
        int nv = v + dw.at(k);
        if (0 <= nu && nu < h && 0 <= nv && nv < w && field.at(nu).at(nv) == '.') {
            u = nu;
            v = nv;
        }
    }
    cout << u + 1 << " " << v + 1 << endl;
    return 0;
}
