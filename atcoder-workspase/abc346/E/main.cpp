#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <unordered_set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
#include <atcoder/all>
using namespace std;
using namespace atcoder;

#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i <= i##_len; ++i)
#define REV(i, a, b) for (int i = (a); i >= (b); --i)
#define CLR(a, b) memset((a), (b), sizeof(a))
#define DUMP(x) cout << #x << " = " << (x) << endl;
#define INF_ll 1001001001001001001ll
#define INF 1001001001
#define fcout cout << fixed << setprecision(12)

using ll = long long;
using vi = vector<int>;
using vl = vector<long long>;
using vs = vector<string>;
using vc = vector<char>;
using vb = vector<bool>;
using vpii = vector<pair<int, int>>;
using vpll = vector<pair<long long, long long>>;
using vvi = vector<vector<int>>;
using vvl = vector<vector<long long>>;
using vvc = vector<vector<char>>;
using vvb = vector<vector<bool>>;
using vvvi = vector<vector<vector<int>>>;
using pii = pair<int, int>;

template <typename T>
inline bool chmax(T &a, T b) {
    return ((a < b) ? (a = b, true) : (false));
}
template <typename T>
inline bool chmin(T &a, T b) {
    return ((a > b) ? (a = b, true) : (false));
}


void solve(long long H, long long W, long long M, std::vector<long long> T, std::vector<long long> A, std::vector<long long> X)
{
    map<int, ll> mp;
    unordered_set<int> r, c;
    REV(i, M - 1, 0) {
        if (T.at(i) == 1) {
            if (r.count(A.at(i)) == 0) {
                mp[X.at(i)] += W - c.size();
            }
            r.insert(A.at(i));
        } else {
            if (c.count(A.at(i)) == 0) {
                mp[X.at(i)] += H - r.size();
            }
            c.insert(A.at(i));
        }
    }
    ll sum = 0;
    for (auto [color, cnt]: mp) {
        sum += cnt;
    }
    mp[0] += (H * W - sum);
    int num = 0;
    for (auto [color, cnt]: mp) if (cnt != 0) num++;

    cout << num << "\n";
    for (auto [color, cnt]: mp) {
        if (cnt != 0) cout << color << " " << cnt << "\n";
    }
    return;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
        long long H;
    std::scanf("%lld", &H);
    long long W;
    std::scanf("%lld", &W);
    long long M;
    std::scanf("%lld", &M);
    std::vector<long long> T(M);
    std::vector<long long> A(M);
    std::vector<long long> X(M);
    for(int i = 0 ; i < M ; i++){
        std::scanf("%lld", &T[i]);
        std::scanf("%lld", &A[i]);
        std::scanf("%lld", &X[i]);
    }
        solve(H, W, M, std::move(T), std::move(A), std::move(X));
        return 0;
}
